<?php

class TriggerClickTest extends \PHPUnit_Framework_TestCase
{

    use \MojDashButton\Test\Integration\Services\Helper\ButtonCodeGenerator;

    /**
     * @var \Shopware\Components\DependencyInjection\Container
     */
    private $container;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->container = Shopware()->Container();
    }


    public function testTriggerClickOnAutoOrderNotConfigured()
    {
        $product = [
            'ordernumber' => 'SW10118.11',
            'quantity' => 7
        ];
        $button = $this->createButton($this->getButtonCode(), [$product]);

        $product['user_id'] = $button->getUserId();
        $product['button_id'] = $button->getId();

        $product['dashproduct_id'] = $button->getProducts()[0]->getId();
        $product['basketId'] = 99999;

        $subscriber = $this->getSubscriber(__FUNCTION__);

        $eventArgs = new Enlight_Event_EventArgs(['basket_entry' => $product]);
        $success = $subscriber->createOrder($eventArgs);

        $this->assertFalse($success);
        $this->removeButtons([$button]);
    }

    /**
     * @return array
     */
    public function testTriggerClickOnAutoOrder()
    {
        $product = [
            'ordernumber' => 'SW10118.11',
            'quantity' => 7,
            'rules' => [
                [
                    'ruledata' => json_encode([
                        'type' => \MojDashButton\Components\Rules\IntervalRule::TYPE,
                        'config' => '2 minutes'
                    ])
                ]
            ]
        ];
        $button = $this->createButton($this->getButtonCode(), [$product]);

        $product['user_id'] = $button->getUserId();
        $product['button_id'] = $button->getId();

        $product['dashproduct_id'] = $button->getProducts()[0]->getId();
        $product['basketId'] = 99999;

        $subscriber = $this->getSubscriber(__FUNCTION__);

        $this->container->get('front')->setRequest(Enlight_Controller_Request_RequestTestCase::class);

        $eventArgs = new Enlight_Event_EventArgs(['basket_entry' => $product]);
        $ordernumber = $subscriber->createOrder($eventArgs);

        $this->assertNotEmpty($ordernumber);

        return [
            'button' => $button,
            'eventargs' => $eventArgs,
            'subscriber' => $subscriber,
            'ordernumber' => $ordernumber
        ];
    }

    /**
     * @depends testTriggerClickOnAutoOrder
     * @param $data
     */
    public function testTriggerClickOnAutoOrderNoOrderCreated($data)
    {
        /** @var \MojDashButton\Models\DashButton $button */
        $button = $data['button'];
        /** @var Enlight_Event_EventArgs $eventargs */
        $eventargs = $data['eventargs'];
        /** @var \MojDashButton\Subscribers\Api\TriggerClick $subscriber */
        $subscriber = $data['subscriber'];

        $success = $subscriber->createOrder($eventargs);

        $this->assertFalse($success);

        $this->removeButtons([$button]);
        $this->deleteOrder($data['ordernumber']);
    }

    private function deleteOrder($ordernumber)
    {
        $db = $this->container->get('db');
        $db->delete('s_order_details',
            'ordernumber = ' . $db->quote($ordernumber));
        $db->delete('s_order',
            'ordernumber = ' . $db->quote($ordernumber));
    }

    private function getSubscriber($method)
    {
        $dbMock = $this->getMockBuilder(\Enlight_Components_Db_Adapter_Pdo_Mysql::class)
            ->disableOriginalConstructor()
            ->setMethods(['fetchOne', 'delete'])
            ->getMock();

        $dbMock->method('fetchOne')
            ->willReturn($method === 'testTriggerClickOnAutoOrder');

        $dbMock->method('delete')
            ->willReturn(true);

        $subscriber = new \MojDashButton\Subscribers\Api\TriggerClick(
            $dbMock,
            $this->container->get('moj_dash_button.services.dash_button.order_handler'),
            $this->container->get('moj_dash_button.services.dash_button.basket_validation_service')
        );

        $this->assertArrayHasKey('DashButton_AddToBasket_Finish', $subscriber::getSubscribedEvents());

        return $subscriber;
    }

}