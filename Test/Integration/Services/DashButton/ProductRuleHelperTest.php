<?php

use MojDashButton\Services\DashButton\ProductRuleHelper;

class ProductRuleHelperTest extends PHPUnit_Framework_TestCase
{

    use \MojDashButton\Test\Integration\Services\Helper\ButtonCodeGenerator;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->container = Shopware()->Container();
    }

    public function testCreateRuleOnProduct()
    {
        $product = [
            'ordernumber' => 'SWAG100',
            'quantity' => 12345
        ];

        $button = $this->createButton($this->getButtonCode(), [$product]);

        $ruleData = [
            \MojDashButton\Components\Rules\IntervalRule::TYPE => '2 minutes'
        ];

        $productPosition = $button->getProducts()[0];

        $this->getRuleHelper()->createProductRule($productPosition, $ruleData);

        $this->assertNotEmpty($productPosition->getRules());

        foreach ($productPosition->getRules() as $rule) {
            $this->assertInstanceOf(\MojDashButton\Models\DashButtonRule::class, $rule);
        }

        return [$button, $productPosition, $ruleData];
    }

    /**
     * @depends testCreateRuleOnProduct
     * @param $data
     */
    public function testValidateRulesOnProduct($data)
    {
        $button = $data[0];
        $productPosition = $data[1];
        $ruleData = $data[2];

        $rules = $this->getRuleHelper()->getProductRules($productPosition);

        foreach ($ruleData as $type => $config) {
            $this->assertArrayHasKey($type, $rules);

            $rule = $rules[$type];
            $this->assertNotEmpty($rule);

            $this->assertEquals($config, $rule['config']);
            $this->assertEquals($type, $rule['type']);
        }

        $this->removeButtons([$button]);
    }

    private function getRuleHelper(): ProductRuleHelper
    {
        return $this->container->get('moj_dash_button.services.dash_button.product_rule_helper');
    }

}
